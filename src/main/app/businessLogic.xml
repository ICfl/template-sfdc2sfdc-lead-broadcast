<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:spring="http://www.springframework.org/schema/beans" 
xmlns:json="http://www.mulesoft.org/schema/mule/json"
 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <batch:job name="broadcastLeadBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="GetLeadInBStep">
            	<enricher source="#[payload != null ? payload.Id : null]" target="#[payload.Id]" doc:name="store id from instance B in payload">
        			<sfdc:query-single config-ref="SalesforceB" query="SELECT Id FROM Lead WHERE Email = '#[payload['Email']]'" doc:name="query Lead from Salesforce Instance B"/>
        		</enricher>
            </batch:step>
             <batch:step name="FindOrCreateOwnerInBStep" accept-expression="'syncOwner' == '${owner.sync.policy}'">
                <choice doc:name="Does owner in A exist?">
                	<when expression="#[payload['Owner'] != null]">
                <enricher source="#[payload]" target="#[recordVars.ownerInB]" doc:name="store result in ownerInB">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Username FROM User WHERE Email = '#[payload['Owner']['Email']]'" doc:name="query Owner in Salesforce Instance B"/>
                </enricher>
                <choice doc:name="Does owner need to be created?">
                    <when expression="#[recordVars.ownerInB == null]">
		                <enricher  target="#[recordVars.ownerInA]" doc:name="store result in payload">
		                    <sfdc:retrieve type="User"  config-ref="SalesforceA" doc:name="query origin Owner in Salesforce A to get all required field.">
								<sfdc:ids>
								    <sfdc:id>#[payload['Owner']['Id']]</sfdc:id>
								</sfdc:ids>
								<sfdc:fields>
									<sfdc:field>Email</sfdc:field>
									<sfdc:field>LastName</sfdc:field>
									<sfdc:field>Alias</sfdc:field>
									<sfdc:field>Username</sfdc:field>
									<sfdc:field>LanguageLocaleKey</sfdc:field>
									<sfdc:field>TimeZoneSidKey</sfdc:field>
									<sfdc:field>LocaleSidKey</sfdc:field>
									<sfdc:field>EmailEncodingKey</sfdc:field>
								</sfdc:fields>
		                    </sfdc:retrieve>
		                </enricher>
                        <enricher doc:name="enrich payload with new OwnerId" target="#[payload.OwnerId]" source="#[payload[0].getId()]">
	                        <processor-chain doc:name="Processor Chain">
                                        <dw:transform-message doc:name="prepare for a create Owner">
                                            <dw:set-payload><![CDATA[%dw 1.0
%output application/java

---
recordVars.ownerInA map {
	($ - 'Id'),
	ProfileId : p('sfdc.b.user.profile.id'),
	Username : $.Username + '.target' + math.random
}
]]></dw:set-payload>
                                        </dw:transform-message>

       		                     <sfdc:create config-ref="SalesforceB" type="User" doc:name="create Owner in Salesforce Instance B">
       	    	                     <sfdc:objects ref="#[payload]"/>
       	        	             </sfdc:create>

	                        </processor-chain>
                        </enricher>
                    </when>
                    <otherwise>
                        <enricher target="#[payload.OwnerId]" doc:name="enrich payload with existing OwnerId">
     	                   <expression-transformer expression="#[recordVars.ownerInB.Id]" doc:name="get existing owner id"/>
                        </enricher>
                    </otherwise>
                </choice>

                	</when>
                    <otherwise>
                        <logger level="INFO" doc:name="Logger" message="There is no Owner assigned to this Lead. Doing nothing"/>
                    </otherwise>
                </choice>
            </batch:step>
            <batch:step name="UpsertLeadInBStep">

                <batch:commit size="${page.size}" doc:name="Batch Commit" >
                	<logger message="Lead to update/create: #[payload]"	level="INFO" doc:name="log 'Lead objects to update/create'" />
                    <dw:transform-message doc:name="prepare for upsert Leads">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	($ - 'type' - 'Owner' - 'LastModifiedDate')
}]]></dw:set-payload>
                    </dw:transform-message>
           	        <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Lead" doc:name="upsert Leads in Salesforce Instance B">
            			<sfdc:objects ref="#[payload]"/>
        			</sfdc:upsert>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
			<json:object-to-json-transformer	doc:name="transform BatchJobInstance to JSON" />
			<logger level="INFO" doc:name="log 'broacast has finished'" message="One Way Sync has finished: #[payload]"/>
        </batch:on-complete>
    </batch:job>

    <flow name="mainFlow" >
        <batch:execute name="broadcastLeadBatch" doc:name="trigger broadcastLeadBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultExceptionStrategy"/>
    </flow>
</mule>
